/* Task1 Code */
/****************/

# Initialize the array
addi x1, zero, 1 # x1 <= 1, assign Seq[1] = 1 to x1
addi x2, zero, 0x80 #x2 <= 0x80, stores memory address of sequence start

# Store Seq[0] at MEM[0x80]
sw zero, 0(x2) # MEM[0x80] <= (Seq[0] which is 0)
sw x1, 4(x2) # MEM[0x84] <= (Seq[1] = 1, 0x84 because 4-bytes per instruction)

# Loop counter
addi x3, zero, 2 # x3 <= i = 2 of for "i" in range (For loop, i = counter)
addi x4, zero, 32 # x4 <= 31 (Loop limit)

# Address register to store the value of last iteration
addi x5, x2, 4 # x5 <= x2 + 4, address of Seq[1]
addi x6, x2, 0 # x6 <= x2, address of Seq[0]

# Initialize Fibonacci Loop
fib_sequence:
  # To start the sequence, load Seq[i-1] and Seq[i-2]
  lw x7, 0(x5) # x7 <= Seq[i-1]
  lw x8, 0(x6) # x8 <= Seq[i-2]

  # Generate Seq[i] as Seq[i] = Seq[i-1] + Seq[i-2]
  add x9, x7, x8 # x9 <= x7 + x8 

  # Update memory and store new Fibonacci value
  addi x2, x5, 4
  sw x9, 0(x2) # MEM[0 + x2] <= x9 (Seq[i])

  # Update registers for next iteration
  addi x6, x5, 0 # x6 becomes new Seq[i-2]
  addi x5, x2, 0 # x5 becomes new Seq[i-1]

  # Update loop counter
  addi x3, x3, 1 # x3 <= x3 + 1 (increment i)

  # End loop when i is 32
  bne x3, x4, fib_sequence # if(x3 != 32, counter is not 31 then branch to fib_sequence)


/* Task 1 Result */
/*****************/

v2.0 raw
33*0 1 1 2 3 5 8 d 
15 22 37 59 90 e9 179 262 
3db 63d a18 1055 1a6d 2ac2 452f 6ff1 
b520 12511 1da31 2ff42 4d973 7d8b5 cb228

/*--------------------------------------------------------------------------------------------*/


/* Task2 Code */
/****************/

# Initialize the key value: 2000
addi x10, zero, 2000   # x10 <= 0 + 2000, (key = 2000)

# Initialize pointer and counter
addi x5, zero, 0x80    # x5 <= 0x80, points to Seq[0]
addi x3, zero, 31      # x3 <= 31, assigns i = 31

# Jump to the end of the Fibonacci array
addi x5, x5, 124       # x5 <= x5 + (4 * 31), move pointer to Seq[31] (4 bytes per element)

# Encryption Loop
array_encrypt:
  # Load Fibonacci sequence value (Seq[31 - i])
  lw x12, 0(x5)         # x12 <= FibSeq[31 - i], load the current Fibonacci value from memory

  # Encrypt value with key
  xor x12, x12, x10     # x12 <= x12 ^ x10, XOR the Fibonacci value with the encryption key

  # Store the encrypted value
  sw x12, 0(x11)        # MEM[0x00 + (4 * i)] <= x12, store the encrypted value

  # Stop if the counter reaches zero
  beq x3, zero, end     # If the loop counter reaches zero, branch to 'end'

  # Increment encrypted array pointer and decrement Fibonacci array pointer
  addi x11, x11, 4      # x11 <= x11 + 4, move to the next encrypted array address
  addi x5, x5, -4       # x5 <= x5 - 4, move to the previous Fibonacci array address

  # Decrement loop counter
  addi x3, x3, -1       # x3 <= x3 - 1, decrement the loop counter

  # Repeat loop
  bge x3, zero, array_encrypt

/* Task 2 Result */
/*****************/
v2.0 raw
7d0 cb5f8 7df65 4dea3 2f892 1dde1 122c1 b2f0 
6821 42ff 2d12 1dbd 1785 dc8 1ed 40b 
5b2 6a9 739 740 789 7e7 7f2 7c5 
7dd 7d8 7d5 7d3 7d2 7d1 7d1 7d0 
0 1 1 2 3 5 8 d 
15 22 37 59 90 e9 179 262 
3db 63d a18 1055 1a6d 2ac2 452f 6ff1 
b520 12511 1da31 2ff42 4d973 7d8b5 cb228


